<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | JS env]]></title>
  <link href="http://www.jsenv.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.jsenv.com/"/>
  <updated>2015-02-23T19:14:10-03:00</updated>
  <id>http://www.jsenv.com/</id>
  <author>
    <name><![CDATA[Guilherme Moura Nascimento]]></name>
    <email><![CDATA[gmoura.nas@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Looping Com Função Anonima Auto-executável]]></title>
    <link href="http://www.jsenv.com/blog/2015/02/23/looping-com-funcao-anonima-auto-executavel/"/>
    <updated>2015-02-23T13:55:09-03:00</updated>
    <id>http://www.jsenv.com/blog/2015/02/23/looping-com-funcao-anonima-auto-executavel</id>
    <content type="html"><![CDATA[<p>Javascript em alguns momentos é uma linguagem muito traiçoeira, lhe prega peças que consomem horas de debug e paciência. São os chamados Gotchas, na tradução literal, &ldquo;pegadinhas&rdquo;.</p>

<p>Coisas que pela logica deveriam funcionar de uma maneira, mais por características de um sistema ou alguma linguagem programação funcionam de maneira inesperada.</p>

<!-- more -->


<p>Esse post se dedica a tratar de um Gotcha muito comum quando se trata de escopo, que provavelmente você já foi pego por ele, caso não, é hora de explodir sua cabeça.</p>

<pre><code class="javascript gotcha http://en.wikipedia.org/wiki/Gotcha_%28programming%29#Gotchas_in_JavaScript_programming_language Gotcha (programming)]">var func = [];
for( var i = 0; i &lt; 3; i++ ){
 func[i] = function () {
  alert(i);
 }
}

func[2]();
func[0]();
</code></pre>

<p>Ao executar esse trecho de código nos deparamos com o alert sempre com o valor 3.</p>

<p>Oh God, Help me!</p>

<p>Take easy boy, vamos entender o que acontece.</p>

<p>O i dentro closure aponta para i global.  Quando chamamos a função func<a href="">0</a> o i será 3 por que o valor do i global é 3.</p>

<p>Problema semelhante acontece quando colocamos um ajax em um looping, e desejamos usar o índice dentro dos callbacks. O Índice aparece como undefined, veja o exemplo:</p>

<pre><code class="javascript ajax dentro de looping">var users = [1028,885,931];
for( var i = 0; i &lt; users.length; i+=1) {
    $.ajax({
        url: 'http://echo.jsontest.com/users/'+ users[i] ,
        dataType: "json",
        success: function( response ) {
            console.log(users[i]) //undefined
            console.log( response ); // server response
        }
    });
}
</code></pre>

<p>A solução é simples, devemos isolar cada índice, criando um escopo com uma função anonima auto-executável para que o valor do i seja preservador em cada interação. Veja o exemplo:</p>

<pre><code class="javascript função anonima auto-executável com looping">var func = [];
for( var i = 0; i &lt; 3; i++ ){
    func[i] = (function (index) {
        alert(index)
    })(i) // Índice do looping sendo passado como parametro
}
</code></pre>

<p>Exemplo usando com ajax:</p>

<pre><code class="javascript função anonima auto-executável com looping">var func = [];
var users = [1028,885,931];
for( var i = 0; i &lt; users.length; i+=1)(function (index) {
$.ajax({
        url: 'http://echo.jsontest.com/users/'+ users[index] ,
        dataType: "json",
        success: function( response ) {
            console.log(users[index]) //undefined
            console.log( response ); // resposta
        }
    });
})(i)// Índice do looping sendo passado como parametro
</code></pre>

<p>O Javascript possui varios gotchas. <a href="http://www.codeproject.com/Articles/182416/A-Collection-of-JavaScript-Gotchas">Jonathan Cardy</a> escreveu um post bem completo. sobre vários gotchas do Javascript, vale uma lida.</p>

<p>Já com relação a closures, existe um post <a href="http://stackoverflow.com/questions/111102/how-do-javascript-closures-work">stackoverflow</a> detalhando a fundo sobre o assunto.</p>
]]></content>
  </entry>
  
</feed>
